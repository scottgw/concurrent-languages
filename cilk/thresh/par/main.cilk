/*
 * thresh: histogram thresholding
 *
 * input:
 *   matrix: the integer matrix to be thresholded
 *   nrows, ncols: the number of rows and columns
 *   percent: the percentage of cells to retain
 *
 * output:
 *   mask: a boolean matrix filled with true for cells kept
 */

#include <cilk-lib.cilkh>
#include <stdlib.h>
#include <stdio.h>

typedef int (*Operator)(int, int);
typedef cilk int (*GenericReduceFunction)(int, int, int**, Operator op);

int max(int a, int b) {
  return a > b ? a : b;
}

cilk int generic_reduce(int begin, int end, int extra, int** matrix,
    Operator op, GenericReduceFunction f) {
  int middle = begin + (end - begin) / 2;
  int left, right, res;
  if (begin + 1 == end) {
    res = spawn f(begin, extra, matrix, op);
    sync;
    return res;
  }
  left = spawn generic_reduce(begin, middle, extra, matrix, op, f);
  right = spawn generic_reduce(middle, end, extra, matrix, op, f);
  sync;
  return op(left, right);
}

cilk int reduce2d_identity(int col, int row, int** matrix, Operator op) {
  return matrix[row][col];
}

cilk int reduce2d_start_cols(int row, int ncols, int** matrix,
    Operator op) {
  int res;
  res = spawn generic_reduce(0, ncols, row, matrix, op, reduce2d_identity);
  sync;
  return res;
}

cilk int reduce2d(int nrows, int ncols, int** matrix, Operator op) {
  int res;
  res = spawn generic_reduce(0, nrows, ncols, matrix, op,
      reduce2d_start_cols);
  sync;
  return res;
}

cilk void thresh(int nrows, int ncols, int** matrix, int percent,
    int** mask) {
  int i, j;
  int nmax = 0;
  int* histogram;
  int count, prefixsum, threshold;

  nmax = spawn reduce2d(nrows, ncols, matrix, max);
  sync;

  histogram = (int*) malloc(sizeof(int) * (nmax + 1));

  for (i = 0; i < nrows; i++) {
    for (j = 0; j < ncols; j++) {
      histogram[matrix[i][j]]++;
    }
  }

  prefixsum = 0;
  threshold = nmax;

  count = (nrows * ncols * percent) / 100;

  for (i = nmax; i >= 0 && prefixsum <= count; i--) {
    prefixsum += histogram[i];
    threshold = i;
  }

  for (i = 0; i < nrows; i++) {
    for (j = 0; j < ncols; j++) {
      mask[i][j] = matrix[i][j] >= threshold;
    }
  }

  free(histogram);
}

cilk int main(int argc, char *argv[]) {
  int nrows, ncols, percent, i, j;
  int** matrix, ** mask;
  scanf("%d%d", &nrows, &ncols);

  matrix = (int**) malloc(sizeof(int*) * nrows);
  for (i = 0; i < nrows; i++) {
    matrix[i] = (int*) malloc(sizeof(int) * ncols);
  }

  mask = (int **) malloc(sizeof(int*) * nrows);
  for (i = 0; i < nrows; i++) {
    mask[i] = (int*) malloc(sizeof(int) * ncols);
  }

  for (i = 0; i < nrows; i++) {
    for (j = 0; j < ncols; j++) {
      scanf("%d", &matrix[i][j]);
    }
  }

  scanf("%d", &percent);

  spawn thresh(nrows, ncols, matrix, percent, mask);
  sync;

  printf("%d %d\n", nrows, ncols);
  for (i = 0; i < nrows; i++) {
    for (j = 0; j < ncols; j++) {
      printf("%d ", mask[i][j]);
    }
    printf("\n");
  }
  printf("\n");

  for (i = 0; i < nrows; i++) {
    free(matrix[i]);
  }
  free(matrix);

  for (i = 0; i < nrows; i++) {
    free(mask[i]);
  }
  free(mask);

  return 0;
}
