/*
 * thresh: histogram thresholding
 *
 * input:
 *   matrix: the integer matrix to be thresholded
 *   nrows, ncols: the number of rows and columns
 *   percent: the percentage of cells to retain
 *
 * output:
 *   mask: a boolean matrix filled with true for cells kept
 */

#include <cilk-lib.cilkh>
#include <stdlib.h>
#include <stdio.h>

typedef int (*Operator)(int, int);
typedef void* ReduceFilter;

typedef struct sReduceState {
  int extra, ncols;
  int row;
  int** matrix;
  Operator op;
  ReduceFilter filter;
} ReduceState;

typedef cilk int (*GenericReduceFunction)(int index, ReduceState state);
typedef cilk void (*SplitFunction)(int index, int* histogram, int extra,
    int nrows, int ncols, int** matrix, int** mask, int threshold);

int max(int a, int b) {
  return a > b ? a : b;
}

int sum(int a, int b) {
  return a + b;
}

cilk void split(int begin, int end, int* histogram, int extra, int nrows,
    int ncols, int** matrix, int** mask, int threshold, SplitFunction f) {
  int middle = begin + (end - begin) / 2;
  if (begin >= end) return;
  if (begin + 1 == end) {
    spawn f(begin, histogram, extra, nrows, ncols, matrix, mask, threshold);
    return;
  }
  spawn split(begin, middle, histogram, extra, nrows, ncols, matrix, mask,
      threshold, f);
  spawn split(middle, end, histogram, extra, nrows, ncols, matrix, mask,
      threshold, f);
}

cilk int generic_reduce(int begin, int end, Operator op,
    GenericReduceFunction f, ReduceState state) {
  int middle = begin + (end - begin) / 2;
  int left, right, res;
  if (begin + 1 == end) {
    res = spawn f(begin, state);
    sync;
    return res;
  }
  left = spawn generic_reduce(begin, middle, op, f, state);
  right = spawn generic_reduce(middle, end, op, f, state);
  sync;
  return op(left, right);
}

cilk int reduce2d_identity_filter(int col, ReduceState state) {
  return state.matrix[state.row][col];
}

cilk int reduce2d_start_cols(int row, ReduceState state) {
  int res;
  state.row = row;
  res = spawn generic_reduce(0, state.ncols, state.op, state.filter, state);
  sync;
  return res;
}

cilk int reduce2d_with_filter(int nrows, int ncols, int** matrix,
    Operator op, ReduceFilter filter, int extra) {
  int res;
  ReduceState state = {.ncols = ncols, .matrix = matrix, .op = op,
    .filter = filter, .extra = extra};
  res = spawn generic_reduce(0, nrows, op, reduce2d_start_cols, state);
  sync;
  return res;
}

cilk int reduce2d(int nrows, int ncols, int** matrix, Operator op) {
  int res;
  res = spawn reduce2d_with_filter(nrows, ncols, matrix, op,
      reduce2d_identity_filter, 0);
  return res;
}

cilk int filter_matrix(int col, ReduceState state) {
  return state.matrix[state.row][col] == state.extra;
}

cilk void fill_histogram_index(int index, int* histogram, int extra,
    int nrows, int ncols, int** matrix, int** mask, int threshold) {
  histogram[index] = spawn reduce2d_with_filter(nrows, ncols, matrix,
      sum, filter_matrix, index);
}

cilk void fill_histogram(int n, int* histogram, int nrows, int ncols,
    int** matrix) {
  spawn split(0, n, histogram, 0, nrows, ncols, matrix, NULL, 0,
      fill_histogram_index);
}

cilk void scan_update_elements(int begin, int end, int* array, int size,
    Operator op) {
  int middle, count;
  if (end - begin <= size) {
    return;
  } else if (end - begin <= 2 * size) {
    array[begin + size] = op(array[begin], array[begin + size]);
  } else {
    count = (end - begin) / size;
    count /= 2;
    count += count % 2;  // to ensure it is even
    middle = begin + count * size;
    spawn scan_update_elements(begin, middle, array, size, op);
    spawn scan_update_elements(middle, end, array, size, op);
  }
}

cilk void scan_impl(int begin, int end, int* array, int size, Operator op) {
  if (end - begin > size) {
    spawn scan_update_elements(begin, end, array, size, op);
    sync;
    spawn scan_impl(begin + size, end, array, 2 * size, op);
    sync;
    spawn scan_update_elements(begin + size, end, array, size, op);
    sync;
  }
}

cilk void scan(int n, int* array, Operator op) {
  spawn scan_impl(0, n, array, 1, op);
}

int binary_search(int n, int* array, int target) {
  int begin = 0, end = n;
  while (begin < end) {
    int middle = begin + (end - begin) / 2;
    if (array[middle] < target) {
      begin = middle + 1;
    } else if(array[middle] > target) {
      end = middle;
    } else {
      begin = end = middle;
    }
  }
  return end;
}

cilk void fill_mask_update_matrix(int col, int* histogram, int row,
    int nrows, int ncols, int** matrix, int** mask, int threshold) {
  mask[row][col] = matrix[row][col] >= threshold;
}

cilk void fill_mask_start_cols(int row, int* histogram, int extra,
    int nrows, int ncols, int** matrix, int** mask, int threshold) {
  spawn split(0, ncols, NULL, row, nrows, ncols, matrix, mask, threshold,
      fill_mask_update_matrix);
}

cilk void fill_mask(int nrows, int ncols, int** matrix, int** mask,
    int threshold) {
  spawn split(0, nrows, NULL, 0, nrows, ncols, matrix, mask, threshold,
      fill_mask_start_cols);
}

cilk void thresh(int nrows, int ncols, int** matrix, int percent,
    int** mask) {
  int nmax = 0;
  int* histogram;
  int count, threshold;

  nmax = spawn reduce2d(nrows, ncols, matrix, max);
  sync;

  histogram = (int*) malloc(sizeof(int) * (nmax + 1));

  spawn fill_histogram(nmax + 1, histogram, nrows, ncols, matrix);
  sync;

  count = (nrows * ncols * percent) / 100;
  count = nrows * ncols - count;  // scan starts from the beginning

  spawn scan(nmax + 1, histogram, sum);
  sync;

  threshold = binary_search(nmax + 1, histogram, count);

  spawn fill_mask(nrows, ncols, matrix, mask, threshold);
  sync;

  free(histogram);
}

cilk int main(int argc, char *argv[]) {
  int nrows, ncols, percent, i, j;
  int** matrix, ** mask;
  scanf("%d%d", &nrows, &ncols);

  matrix = (int**) malloc(sizeof(int*) * nrows);
  for (i = 0; i < nrows; i++) {
    matrix[i] = (int*) malloc(sizeof(int) * ncols);
  }

  mask = (int **) malloc(sizeof(int*) * nrows);
  for (i = 0; i < nrows; i++) {
    mask[i] = (int*) malloc(sizeof(int) * ncols);
  }

  for (i = 0; i < nrows; i++) {
    for (j = 0; j < ncols; j++) {
      scanf("%d", &matrix[i][j]);
    }
  }

  scanf("%d", &percent);

  spawn thresh(nrows, ncols, matrix, percent, mask);
  sync;

  printf("%d %d\n", nrows, ncols);
  for (i = 0; i < nrows; i++) {
    for (j = 0; j < ncols; j++) {
      printf("%d ", mask[i][j]);
    }
    printf("\n");
  }
  printf("\n");

  for (i = 0; i < nrows; i++) {
    free(matrix[i]);
  }
  free(matrix);

  for (i = 0; i < nrows; i++) {
    free(mask[i]);
  }
  free(mask);

  return 0;
}
