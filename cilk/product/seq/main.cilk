/*
 * product: matrix-vector product
 *
 * input:
 *   nelts: the number of elements
 *   matrix: a real matrix
 *   vector: a real vector
 *
 * output:
 *   result: a real vector, whose values are the result of the product
 */

#include <cilk-lib.cilkh>
#include <stdio.h>
#include <stdlib.h>

void product(int nelts, double** matrix, double* vector, double* result) {
  int i, j;
  double sum;
  for (i = 0; i < nelts; i++) {
    sum = 0;
    for (j = 0; j < nelts; j++) {
      sum += matrix[i][j] * vector[j];
    }
    result[i] = sum;
  }
}

double** read_matrix(int nelts) {
  int i, j;
  double** matrix = (double **) malloc(sizeof(double *) * nelts);
  for (i = 0; i < nelts; i++) {
    matrix[i] = (double *) malloc(sizeof(double) * nelts);
    for (j = 0; j < nelts; j++) {
      scanf("%lf", &matrix[i][j]);
    }
  }
  return matrix;
}

void free_matrix(int nelts, double** matrix) {
  int i;
  for (i = 0; i < nelts; i++) {
    free(matrix[i]);
  }
  free(matrix);
}

double* read_vector(int nelts) {
  int i;
  double* vector = (double* ) malloc(sizeof(double) * nelts);
  for (i =  0; i < nelts; i++) {
    scanf("%lf", &vector[i]);
  }
  return vector;
}

int main(int argc, char *argv[]) {
  int nelts, i;
  double** matrix;
  double* vector;
  double* result;

  scanf("%d", &nelts);
  matrix = read_matrix(nelts);
  vector = read_vector(nelts);
  result = (double* ) malloc(sizeof(double) * nelts);

  product(nelts, matrix, vector, result);

  printf("%d\n", nelts);
  for (i = 0; i < nelts; i++) {
    printf("%g ", result[i]);
  }
  printf("\n");

  free_matrix(nelts, matrix);
  free(vector);
  free(result);

  return 0;
}
