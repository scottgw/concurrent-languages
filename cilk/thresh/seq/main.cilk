/*
 * thresh: histogram thresholding
 *
 * input:
 *   matrix: the integer matrix to be thresholded
 *   nrows, ncols: the number of rows and columns
 *   percent: the percentage of cells to retain
 *
 * output:
 *   mask: a boolean matrix filled with true for cells kept
 */

#include <cilk-lib.cilkh>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

int is_bench = 0;

static unsigned char matrix[30000][30000];
static unsigned char mask[30000][30000];

int max(int a, int b) {
  return a > b ? a : b;
}

void thresh(int nrows, int ncols, int percent) {
  int i, j;
  int nmax = 0;
  int* histogram;
  int count, prefixsum, threshold;

  for (i = 0; i < nrows; i++) {
    for (j = 0; j < ncols; j++) {
      nmax = max(nmax, matrix[i][j]);
    }
  }

  histogram = (int*) malloc(sizeof(int) * (nmax + 1));

  for (i = 0; i < nrows; i++) {
    for (j = 0; j < ncols; j++) {
      histogram[matrix[i][j]]++;
    }
  }

  count = (nrows * ncols * percent) / 100;

  prefixsum = 0;
  threshold = nmax;

  for (i = nmax; i >= 0 && prefixsum <= count; i--) {
    prefixsum += histogram[i];
    threshold = i;
  }

  for (i = 0; i < nrows; i++) {
    for (j = 0; j < ncols; j++) {
      mask[i][j] = matrix[i][j] >= threshold;
    }
  }

  /*
  free(histogram);//*/
}

int main(int argc, char *argv[]) {
  int nrows, ncols, percent, i, j;

  if (argc == 2) {
    if (!strcmp(argv[argc - 1], "--is_bench")) {
      is_bench = 1;
    }
  }

  scanf("%d%d", &nrows, &ncols);

  if (!is_bench) {
    for (i = 0; i < nrows; i++) {
      for (j = 0; j < ncols; j++) {
        scanf("%hhu", &matrix[i][j]);
      }
    }
  }

  scanf("%d", &percent);

  thresh(nrows, ncols, percent);

  if (!is_bench) {
    printf("%d %d\n", nrows, ncols);
    for (i = 0; i < nrows; i++) {
      for (j = 0; j < ncols; j++) {
        printf("%hhu ", mask[i][j]);
      }
      printf("\n");
    }
    printf("\n");
  }

  return 0;
}
