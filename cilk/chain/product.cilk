/*
 * product: matrix-vector product
 *
 * input:
 *   nelts: the number of elements
 *   matrix: a real matrix
 *   vector: a real vector
 *
 * output:
 *   result: a real vector, whose values are the result of the product
 */

#include <cilk-lib.cilkh>
#include <stdio.h>
#include <stdlib.h>

typedef struct sSplitState {
  int nelts;
  double** matrix;
  double* vector;
  double* result;
} SplitState;

typedef cilk void (*SplitFunction)(int index, SplitState state);

cilk void split(int begin, int end, SplitFunction f, SplitState state);

cilk void product_split(int index, SplitState state) {
  double sum = 0;
  int j;
  for (j = 0; j < state.nelts; j++) {
    sum += state.matrix[index][j] * state.vector[j];
  }
  state.result[index] = sum;
}

cilk void product(int nelts, double** matrix, double* vector,
    double* result) {
  SplitState state = {.nelts = nelts, .matrix = matrix, .vector = vector,
    .result = result};
  spawn split(0, nelts, product_split, state);
}

double* read_vector(int nelts) {
  int i;
  double* vector = (double* ) malloc(sizeof(double) * nelts);
  for (i =  0; i < nelts; i++) {
    scanf("%lf", &vector[i]);
  }
  return vector;
}

