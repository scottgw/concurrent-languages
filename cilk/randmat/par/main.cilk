/*
 * randmat: random number generation
 *
 * input:
 *   nrows, ncols: the number of rows and columns
 *   s: the seed
 *
 * output:
 *   matrix: an nrows x ncols integer matrix
 */

#include <cilk-lib.cilkh>
#include <stdlib.h>
#include <stdio.h>

static unsigned char matrix[10000][100000];

typedef cilk void (*Function)(int, int);

// parallel for on [begin, end), calling f()
cilk void split(int begin, int end, int extra, Function f) {
  int middle = begin + (end - begin) / 2;
  if (begin >= end) return;
  if (begin + 1 == end) {
    spawn f(begin, extra);
  } else {
    spawn split(begin, middle, extra, f);
    spawn split(middle, end, extra, f);
  }
}

cilk void update_matrix(int col, int row) {
  unsigned int seed = 0;
  matrix[row][col] = rand_r(&seed);
}

cilk void start_cols(int row, int ncols) {
  int j;
  unsigned int seed = 0;
  // parallel for on cols, calling update_matrix()
  //spawn split(0, ncols, row, update_matrix);
  for (j = 0; j < ncols; j++) {
    matrix[row][j] = rand_r(&seed);
  }
}

cilk void randmat(int nrows, int ncols, int s) {
  srand(s);
  // parallel for on rows, calling start_cols()
  spawn split(0, nrows, ncols, start_cols);
}

cilk int main(int argc, char *argv[]) {
  int nrows, ncols, s;
  scanf("%d%d%d", &nrows, &ncols, &s);

  spawn randmat(nrows, ncols, s);
  sync;

  /*
  for (i = 0; i < nrows; i++) {
    for (j = 0; j < ncols; j++) {
      printf("%d ", matrix[i][j]);
    }
    printf("\n");
  }
  printf("\n");

  for (i = 0; i < nrows; i++) {
    free(matrix[i]);
  }
  free(matrix);//*/

  return 0;
}
